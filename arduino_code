#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include "esp_log.h"


//
// WARNING!!! PSRAM IC required for UXGA resolution and high JPEG quality
//            Ensure ESP32 Wrover Module or other board with PSRAM is selected
//            Partial images will be transmitted if image exceeds buffer size
//

// Select camera model
#define CAMERA_MODEL_WROVER_KIT // Has PSRAM
//#define CAMERA_MODEL_ESP_EYE // Has PSRAM
//#define CAMERA_MODEL_M5STACK_PSRAM // Has PSRAM
//#define CAMERA_MODEL_M5STACK_V2_PSRAM // M5Camera version B Has PSRAM
//#define CAMERA_MODEL_M5STACK_WIDE // Has PSRAM
//#define CAMERA_MODEL_M5STACK_ESP32CAM // No PSRAM
//#define CAMERA_MODEL_AI_THINKER // Has PSRAM
//#define CAMERA_MODEL_TTGO_T_JOURNAL // No PSRAM

// Test comment here

#include "camera_pins.h"

const char* ssid = "Wifi Network Here";
const char* password = "Wifi Password Here";

void startCameraServer();

const int buttonPin = 0;     // the number of the pushbutton pin
const int ledPin =  15;      // the number of the LED pin

// Button states
int buttonState = HIGH; 
int lastButtonState = HIGH; 


void setup() {
  pinMode(ledPin, OUTPUT);      // initialize the LED pin as an output
  pinMode(buttonPin, INPUT_PULLUP); // enable the internal pull-up resistor
  Serial.begin(115200); // Start the serial communication with the baud rate you desire
  Serial.setDebugOutput(true);
  Serial.println();

  Serial.print("1");

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  Serial.print("2");

  // if PSRAM IC present, init with UXGA resolution and higher JPEG quality
  //                      for larger pre-allocated frame buffer.
  if(psramFound()){
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }

Serial.print("3");

#if defined(CAMERA_MODEL_ESP_EYE)
  pinMode(13, INPUT_PULLUP);
  pinMode(14, INPUT_PULLUP);
#endif

Serial.print("4");

  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  Serial.print("5");

  sensor_t * s = esp_camera_sensor_get();
  // initial sensors are flipped vertically and colors are a bit saturated
  if (s->id.PID == OV3660_PID) {
    s->set_vflip(s, 1); // flip it back
    s->set_brightness(s, 1); // up the brightness just a bit
    s->set_saturation(s, -2); // lower the saturation
  }

  Serial.print("6");
  // drop down frame size for higher initial frame rate
  s->set_framesize(s, FRAMESIZE_QVGA);

  Serial.print("7");

#if defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)
  s->set_vflip(s, 1);
  s->set_hmirror(s, 1);
#endif

  Serial.print("8");

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");

  // Everything was working until I added this line of code. Once debugged, 
    // continue adding block by block from successful_camera_connect file
  startCameraServer();

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");


// Close Setup fncn
}






void loop() {
  buttonState = digitalRead(buttonPin); // read the state of the pushbutton value

  // check if the pushbutton is pressed. If it is, the buttonState is LOW
  if (buttonState == LOW) { 
    digitalWrite(ledPin, HIGH);  // turn LED on
    // Only write to serial when the state changes from HIGH to LOW
    if(lastButtonState == HIGH) {
      Serial.println("Hello World!"); // write "Hello World!" to the serial monitor
    
      // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START CAPTURE IMAGE
      camera_fb_t * fb = NULL;
      fb = esp_camera_fb_get(); 

      if (!fb) {
        Serial.println("Camera capture failed");
        return;
      }

      // Send image to Azure Custom Vision API
      HTTPClient http1;
      Serial.println("Custom Vision AI HTTP request");
      http1.begin("API Link Here"); 
      http1.addHeader("Content-Type", "application/octet-stream");
      http1.addHeader("Prediction-Key", "Key here");
      int http1ResponseCode = http1.POST(fb->buf, fb->len);  
      
      String response;

      if(http1ResponseCode>0){
          response = http1.getString();   //Get the response to the request
          Serial.println(http1ResponseCode);   //Print return code
          Serial.println(response);           //Print request answer
      } else {
          Serial.print("Error on sending POST: ");
          Serial.println(http1ResponseCode);
      }


      http1.end(); //Free resources

      // Free the image buffer after using it
      esp_camera_fb_return(fb);
    
      // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END CAPTURE IMAGE



      // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START SHARE TO PBI

      HTTPClient http2;
      Serial.println("PBI HTTP request");
      http2.begin("Azure Function with Key Here"); 
      http2.addHeader("Content-Type", "text/plain");

      int http2ResponseCode = http2.POST(response);
      Serial.println("HTTP code is...");
      Serial.println(http2ResponseCode);

      String payload = http2.getString();
      Serial.println("Response payload is...");
      Serial.println(payload);

      http2.end(); // Close connection
      Serial.println("PBI HTTP Request closed");

      // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END SHARE TO PBI

    }
  } else {
    digitalWrite(ledPin, LOW);   // turn LED off
  }
  
  lastButtonState = buttonState; // save the current state as the last state, for the next time through the loop
}
